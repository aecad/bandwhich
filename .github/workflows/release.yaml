# The way this works is the following:
#
# - create-release job runs purely to initialize the GitHub release itself
# and to output upload_url for the following job.
#
# - build-release job runs only once create-release is finished. It gets
# the release upload URL from create-release job outputs, then builds
# the release executables for each supported platform and attaches them
# as release assets to the previously created release.
#
# Reference:
# - https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/
#
# Currently this workflow only ever creates drafts; the draft should be checked
# and then released manually.

name: release
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  workflow_dispatch:

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: create_release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          # draft: ${{ github.event_name == 'workflow_dispatch' }}
          draft: true
          prerelease: false

  build-release:
    name: build-release
    needs: create-release
    runs-on: ${{ matrix.os }}
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build:
          - linux-arm-musleabihf
        include:
          - build: linux-arm-musleabihf
            os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf



    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install cross-tools
        run: cargo install cross

      - name: Install musl-tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get install -y --no-install-recommends musl-tools

      - name: Build release binary
        run: cross build --target armv7-unknown-linux-musleabihf

      - name: Strip release binary (unix)
        if: matrix.os != 'windows-latest'
        run: strip "target/${{ matrix.target }}/debug/bandwhich"

      - name: Tar release (unix)
        if: matrix.os != 'windows-latest'
        working-directory: ./target/${{ matrix.target }}/debug
        run: tar cvfz bandwhich-${{ github.ref_name }}-${{matrix.target}}.tar.gz "bandwhich"

      - name: Upload release archive (unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/${{ matrix.target }}/debug/bandwhich-${{ github.ref_name }}-${{matrix.target}}.tar.gz
          asset_name: bandwhich-${{ github.ref_name }}-${{matrix.target}}.tar.gz
          asset_content_type: application/octet-stream


